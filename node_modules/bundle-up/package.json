{
  "name": "bundle-up",
  "author": {
    "name": "Fredrik Lindin",
    "email": "fredriklindin@gmail.com"
  },
  "description": "A simple asset manager middleware for connect",
  "version": "0.3.5",
  "repository": {
    "url": ""
  },
  "main": "index.js",
  "engines": {
    "node": ">= 0.6.x < 0.9.0"
  },
  "scripts": {
    "test": "node_modules/.bin/mocha --compilers coffee:coffee-script"
  },
  "dependencies": {
    "coffee-script": ">= 1.1.3",
    "csso": ">= 1.2.8",
    "async": ">= 0.1.15",
    "stylus": ">= 0.19.0",
    "mkdirp": ">= 0.0.7",
    "uglify-js": ">= 2.2.0"
  },
  "devDependencies": {
    "mocha": ">= 0.11.0",
    "expect.js": ">= 0.1.1",
    "rimraf": ">= 1.0.8",
    "express": "2.x",
    "request": ">= 2.2.9",
    "jade": ">= 0.19.0"
  },
  "readme": "Bundle up!  [![Build Status](https://secure.travis-ci.org/Cowboy-coder/bundle-up.png)](https://secure.travis-ci.org/Cowboy-coder/bundle-up)\n==========\n\nBundle up is a middleware for connect to manage all client-side assets in an organized way.\n\nInstallation\n------------\n\n    $ npm install bundle-up\n\nUsage\n-----\n\n``` js\nvar BundleUp = require('bundle-up');\n\nBundleUp(app, __dirname + '/assets', {\n  staticRoot: __dirname + '/public/',\n  staticUrlRoot:'/',\n  bundle:true,\n  minifyCss: true,\n  minifyJs: true\n});\n\n// To actually serve the files a static file\n// server needs to be added after Bundle Up\napp.use(express.static(__dirname + '/public/'))\n```\n\nThe first parameter to the BundleUp middleware is the app object and the second is the path to the assets file. Through the assets file all client-side assets needs to get added.\n\n``` js\n// assets.js\nmodule.exports = function(assets) {\n  assets.root = __dirname;\n  assets.addJs('/public/js/jquery-1.6.4.min.js');\n  assets.addJs('/public/js/jquery.placeholder.min.js');\n  assets.addJs('/app/client/main.coffee');\n\n  assets.addCss('/public/bootstrap/bootstrap.min.css');\n  assets.addCss('/app/styles/screen.styl');\n}\n```\n\nJust point to a file (.js, .css, .coffee or .styl are currently supported) anywhere in your app directory. In your view you can then just render all the css or javascript files by calling `renderStyles` and `renderJs` like this:\n\n``` jade\n!!!\nhtml\n  head\n    != renderStyles()\n  body!= body\n    != renderJs()\n```\n\nBy default this will render\n\n``` html\n<link href='/bootstrap/bootstrap.min.css' media='screen' rel='stylesheet' type='text/css'/>\n<link href='/generated/app/styles/screen.css' media='screen' rel='stylesheet' type='text/css'/>\n\n<script src='/js/jquery-1.6.4.min.js' type='text/javascript'></script>\n<script src='/js/jquery.placeholder.min.js' type='text/javascript'></script>\n<script src='/generated/app/client/main.js' type='text/javascript'></script>\n```\n\nAll assets will be compiled on-the-fly when `bundle:false` is set. Therefore the server never\nneeds to be restarted when editing the different assets.\n\nTo render bundles `bundle:true` needs to be passed as a parameter to the middleware. This will concatenate all javascript and css files into bundles and render this:\n\n``` html\n<link href='/generated/bundle/d7aa56c_global.css' media='screen' rel='stylesheet' type='text/css'/>\n<script src='/generated/bundle/1e4b515_global.js' type='text/javascript'></script>\n```\n\nAll bundles are generated during startup. The filename will change with the content so you should configure your web server with far future expiry headers.\n\n### generated/\n\nAll files that needs to be compiled, copied (if you are bundling up a file that doesn't reside in your `public/` directory) or bundled will end up in `public/generated/` directory. This is to have an organized way to separate whats actually *your code* and whats *generated code*.\n\n### Filtered paths\n\nAll files can be added in a directory by using a \"filtered path\" like this\n\n``` js\n// assets.js\nmodule.exports = function(assets) {\n  assets.addJs(__dirname + '/public/js/**'); //adds all files in /public/js (subdirectories included)\n  assets.addJs(__dirname + '/public/*.js'); //adds all js files in /public\n  assets.addJs(__dirname + '/cs/**.coffee'); //adds all coffee files in /cs (subdirectories included)\n});\n```\n### Namespaces\n\nSometimes all javascript or css files cannot be bundled into the same bundle. In that case\nnamespaces can be used\n\n``` js\n// assets.js\nmodule.exports = function(assets) {\n  assets.addJs(__dirname + '/public/js/1.js');\n  assets.addJs(__dirname + '/public/js/2.js');\n  assets.addJs(__dirname + '/public/locales/en_US.js', 'en_US');\n\n  assets.addJs(__dirname + '/public/css/1.css');\n  assets.addJs(__dirname + '/public/css/2.css');\n  assets.addJs(__dirname + '/public/css/ie.css', 'ie');\n});\n```\n\n``` jade\n!!!\nhtml\n  head\n    != renderStyles()\n    != renderStyles('ie')\n  body!= body\n    != renderJs()\n    != renderJs('en_US')\n```\n\nwhich will render this with `bundle:false`:\n\n``` html\n<link href='/css/1.css' media='screen' rel='stylesheet' type='text/css'/>\n<link href='/css/2.css' media='screen' rel='stylesheet' type='text/css'/>\n<link href='/css/ie.css' media='screen' rel='stylesheet' type='text/css'/>\n\n<script src='/js/1.js' type='text/javascript'></script>\n<script src='/js/2.js' type='text/javascript'></script>\n<script src='/locales/en_US.js' type='text/javascript'></script>\n```\n\nand this with `bundle:true`:\n\n``` html\n<link href='/generated/bundle/d7aa56c_global.css' media='screen' rel='stylesheet' type='text/css'/>\n<link href='/generated/bundle/d7aa56c_ie.css' media='screen' rel='stylesheet' type='text/css'/>\n<script src='/generated/bundle/1e4b515_global.js' type='text/javascript'></script>\n<script src='/generated/bundle/1e4b515_en_US.js' type='text/javascript'></script>\n```\n\nLicense\n-------\n\nMIT licensed\n",
  "readmeFilename": "README.md",
  "_id": "bundle-up@0.3.5",
  "_from": "bundle-up@latest"
}
