// Generated by CoffeeScript 1.6.2
(function() {
  define(['utilities/window', 'globals', 'worker', 'ephemeris', 'ellipse', 'util', 'jquery', 'detector', 'three', 'domevent', 'window-resize', 'vector3', 'full-screen', 'scene', 'sprite', 'cube-geometry', 'mesh', 'quaternion', 'webglrenderer', 'shader-utils', 'trackball', 'perspective-camera', 'image-utils'], function(window) {
    'use strict';
    var initSimulation, jed, stopSimulation, toggleSimulation;

    window.polling = function(callback) {
      return window.setTimeout(callback, 1000 / 60);
    };
    window.frame = function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || polling;
    };
    window.initGUI = function() {
      var ViewUI;

      ViewUI = function() {
        this['Cost effective'] = function() {
          return runAsteroidQuery('score');
        };
        this['Most valuable'] = function() {
          return runAsteroidQuery('price');
        };
        this['Most accessible'] = function() {
          return runAsteroidQuery('closeness');
        };
        this.movement = object_movement_on;
        this['planet orbits'] = planet_orbits_visible;
        return this['display date'] = '12/26/2012';
      };
      return window.onload = function() {
        var gui, text;

        text = new ViewUI();
        gui = new dat.GUI();
        gui.add(text, 'Cost effective');
        gui.add(text, 'Most valuable');
        gui.add(text, 'Most accessible');
        gui.add(text, 'movement').onChange(function() {
          var object_movement_on;

          object_movement_on = !object_movement_on;
          return toggleSimulation(object_movement_on);
        });
        gui.add(text, 'planet orbits').onChange(function() {
          return togglePlanetOrbits();
        });
        gui.add(text, 'display date').onChange(function(val) {
          var newdate, newjed;

          newdate = Date.parse(val);
          if (newdate) {
            newjed = toJED(newdate);
            changeJED(newjed);
            if (!object_movement_on) {
              return render(true);
            }
          }
        }).listen();
        return window.datgui = text;
      };
    };
    window.togglePlanetOrbits = function() {
      var i, planet_orbits_visible;

      if (planet_orbits_visible) {
        for (i in planets) {
          scene.remove(planets[i].getEllipse());
        }
      } else {
        for (i in planets) {
          scene.add(planets[i].getEllipse());
        }
      }
      return planet_orbits_visible = !planet_orbits_visible;
    };
    window.init = function() {
      var asteroid_2012_da14, camera, cameraControls, cameraH, cameraW, earth, format, jupiter, mars, material, mercury, mesh, particle, path, planets, reflectionCube, renderer, scene, shader, sprite, sun, texture, urls, using_webgl, venus;

      $('#loading-text').html('renderer');
      if (WEB_GL_ENABLED && Detector.webgl) {
        renderer = new THREE.WebGLRenderer({
          antialias: true
        });
        renderer.setClearColor(0x000000, 1);
        using_webgl = true;
        window.gl = renderer.getContext();
      } else {
        renderer = new THREE.CanvasRenderer();
        $('#not-supported').show();
      }
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.getElementById('container').appendChild(renderer.domElement);
      scene = new THREE.Scene();
      cameraH = 3;
      cameraW = cameraH / window.innerHeight * window.innerWidth;
      window.cam = camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 5000);
      setDefaultCameraPosition();
      THREE.Object3D._threexDomEvent.camera(camera);
      THREEx.WindowResize(renderer, camera);
      if (THREEx.FullScreen.available()) {
        THREEx.FullScreen.bindKey();
      }
      scene.add(camera);
      cameraControls = new THREE.TrackballControlsX(camera);
      cameraControls.staticMoving = true;
      cameraControls.panSpeed = 2;
      cameraControls.zoomSpeed = 3;
      cameraControls.maxDistance = 1100;
      if (using_webgl) {
        $('#loading-text').html('sun');
        sun = new THREE.Object3D();
        texture = THREE.ImageUtils.loadTexture("/img/sunsprite.png");
        sprite = new THREE.Sprite({
          map: texture,
          blending: THREE.AdditiveBlending,
          useScreenCoordinates: false,
          color: 0xffffff
        });
        sprite.scale.x = 50;
        sprite.scale.y = 50;
        sprite.scale.z = 1;
        sprite.color.setHSL(1.0, 0.0, 1.0);
        sun.add(sprite);
        scene.add(sun);
      } else {
        material = new THREE.ParticleBasicMaterial({
          map: new THREE.Texture(starTexture(0xfff2a1, 1)),
          blending: THREE.AdditiveBlending
        });
        particle = new THREE.Particle(material);
        particle.isClickable = false;
        scene.add(particle);
      }
      runAsteroidQuery();
      $('#loading-text').html('planets');
      mercury = new Orbit3D(Ephemeris.mercury, {
        color: 0x913CEE,
        width: 1,
        jed: jed,
        object_size: 1.7,
        texture_path: '/img/texture-mercury.jpg',
        display_color: new THREE.Color(0x913CEE),
        particle_geometry: particle_system_geometry,
        name: 'Mercury'
      }, !using_webgl);
      scene.add(mercury.getEllipse());
      if (!using_webgl) {
        scene.add(mercury.getParticle());
      }
      venus = new Orbit3D(Ephemeris.venus, {
        color: 0xFF7733,
        width: 1,
        jed: jed,
        object_size: 1.7,
        texture_path: '/img/texture-venus.jpg',
        display_color: new THREE.Color(0xFF7733),
        particle_geometry: particle_system_geometry,
        name: 'Venus'
      }, !using_webgl);
      scene.add(venus.getEllipse());
      if (!using_webgl) {
        scene.add(venus.getParticle());
      }
      earth = new Orbit3D(Ephemeris.earth, {
        color: 0x009ACD,
        width: 1,
        jed: jed,
        object_size: 1.7,
        texture_path: '/img/texture-earth.jpg',
        display_color: new THREE.Color(0x009ACD),
        particle_geometry: particle_system_geometry,
        name: 'Earth'
      }, !using_webgl);
      scene.add(earth.getEllipse());
      if (!using_webgl) {
        scene.add(earth.getParticle());
      }
      feature_map['earth'] = {
        orbit: earth,
        idx: 2
      };
      mars = new Orbit3D(Ephemeris.mars, {
        color: 0xA63A3A,
        width: 1,
        jed: jed,
        object_size: 1.7,
        texture_path: '/img/texture-mars.jpg',
        display_color: new THREE.Color(0xA63A3A),
        particle_geometry: particle_system_geometry,
        name: 'Mars'
      }, !using_webgl);
      scene.add(mars.getEllipse());
      if (!using_webgl) {
        scene.add(mars.getParticle());
      }
      jupiter = new Orbit3D(Ephemeris.jupiter, {
        color: 0xFF7F50,
        width: 1,
        jed: jed,
        object_size: 1.7,
        texture_path: '/img/texture-jupiter.jpg',
        display_color: new THREE.Color(0xFF7F50),
        particle_geometry: particle_system_geometry,
        name: 'Jupiter'
      }, !using_webgl);
      scene.add(jupiter.getEllipse());
      if (!using_webgl) {
        scene.add(jupiter.getParticle());
      }
      planets = [mercury, venus, earth, mars, jupiter];
      if (featured_2012_da14) {
        asteroid_2012_da14 = new Orbit3D(Ephemeris.asteroid_2012_da14, {
          color: 0xff0000,
          width: 1,
          jed: jed,
          object_size: 1.7,
          texture_path: '/img/cloud4.png',
          display_color: new THREE.Color(0xff0000),
          particle_geometry: particle_system_geometry,
          name: '2012 DA14'
        }, !using_webgl);
        scene.add(asteroid_2012_da14.getEllipse());
        if (!using_webgl) {
          scene.add(asteroid_2012_da14.getParticle());
        }
        feature_map['2012 DA14'] = {
          orbit: asteroid_2012_da14,
          idx: 5
        };
        planets.push(asteroid_2012_da14);
      }
      if (using_webgl) {
        path = "/img/dark-s_";
        format = '.jpg';
        urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format];
        reflectionCube = THREE.ImageUtils.loadTextureCube(urls);
        reflectionCube.format = THREE.RGBFormat;
        shader = THREE.ShaderUtils.lib["cube"];
        shader.uniforms["tCube"].value = reflectionCube;
        material = new THREE.ShaderMaterial({
          fragmentShader: shader.fragmentShader,
          vertexShader: shader.vertexShader,
          uniforms: shader.uniforms,
          depthWrite: false,
          side: THREE.BackSide
        });
        mesh = new THREE.Mesh(new THREE.CubeGeometry(5000, 5000, 5000), material);
        scene.add(mesh);
      }
      $('#container').on('mousedown', function() {
        var camera_fly_around;

        return camera_fly_around = false;
      });
      return window.renderer = renderer;
    };
    window.setNeutralCameraPosition = function() {
      var timer;

      timer = 0.0001 * Date.now();
      cam.position.x = Math.sin(timer) * 25;
      return cam.position.z = -100 + Math.cos(timer) * 20;
    };
    window.setHighlight = function(full_name) {
      var idx, mapped_obj, orbit_obj;

      mapped_obj = feature_map[full_name];
      orbit_obj = mapped_obj['orbit'];
      if (!orbit_obj) {
        alert("Sorry, something went wrong and I can't highlight this object.");
        return;
      }
      idx = mapped_obj['idx'];
      if (using_webgl) {
        attributes.value_color.value[idx] = new THREE.Color(0x0000ff);
        attributes.size.value[idx] = 30.0;
        return attributes.locked.value[idx] = 1.0;
      }
    };
    window.clearLock = function(set_default_camera) {
      var locked_object, locked_object_color, locked_object_ellipse, locked_object_idx, locked_object_size;

      if (!locked_object) {
        return;
      }
      if (set_default_camera) {
        setDefaultCameraPosition();
      }
      cameraControls.target = new THREE.Vector3(0, 0, 0);
      if (using_webgl) {
        attributes.value_color.value[locked_object_idx] = locked_object_color;
        attributes.size.value[locked_object_idx] = locked_object_size;
        attributes.locked.value[locked_object_idx] = 0.0;
      }
      if (locked_object_idx > planets.length) {
        scene.remove(locked_object_ellipse);
      }
      locked_object = null;
      locked_object_ellipse = null;
      locked_object_idx = -1;
      locked_object_size = -1;
      locked_object_color = null;
      return setNeutralCameraPosition();
    };
    window.setLock = function(full_name) {
      var camera_fly_around, locked_object, locked_object_color, locked_object_ellipse, locked_object_idx, locked_object_size, mapped_obj, orbit_obj;

      if (locked_object) {
        clearLock();
      }
      mapped_obj = feature_map[full_name];
      orbit_obj = mapped_obj['orbit'];
      if (!orbit_obj) {
        alert("Sorry, something went wrong and I can't lock on this object.");
        return;
      }
      locked_object = orbit_obj;
      locked_object_idx = mapped_obj['idx'];
      if (using_webgl) {
        locked_object_color = attributes.value_color.value[locked_object_idx];
        attributes.value_color.value[locked_object_idx] = new THREE.Color(0xff0000);
        if (full_name === 'earth') {
          attributes.value_color.value[locked_object_idx] = new THREE.Color(0x00ff00);
        }
        locked_object_size = attributes.size.value[locked_object_idx];
        attributes.size.value[locked_object_idx] = 30.0;
        attributes.locked.value[locked_object_idx] = 1.0;
      }
      locked_object_ellipse = locked_object.getEllipse();
      scene.add(locked_object_ellipse);
      return camera_fly_around = true;
    };
    window.startSimulation = function() {
      var i, j, obj_ephs, particles, _results;

      if (!asteroids_loaded) {
        throw "couldn't start simulation: asteroids not loaded";
      }
      if (!workers_initialized) {
        throw "couldn't start simulation: simulation not initialized";
      }
      _results = [];
      for (i in workers) {
        particles = works[i];
        obj_ephs = [];
        for (j in particles) {
          obj_ephs.push(particles[j].eph);
        }
        _results.push(workers[i].postMessage({
          command: 'start',
          particle_ephemeris: obj_ephs,
          start_jed: jed
        }));
      }
      return _results;
    };
    stopSimulation = function() {
      return toggleSimulation(false);
    };
    toggleSimulation = function(run) {
      var i, _results;

      _results = [];
      for (i in workers) {
        _results.push(workers[i].postMessage({
          command: 'toggle_simulation',
          val: run
        }));
      }
      return _results;
    };
    initSimulation = function() {
      var i, l, objects_per_worker, remainder, start, workers_initialized;

      l = added_objects.length;
      objects_per_worker = Math.ceil(l / NUM_WORKERS);
      remainder = l % NUM_WORKERS;
      i = 0;
      while (i < NUM_WORKERS) {
        workers[i] = new Worker(worker_path);
        start = i * objects_per_worker;
        works[i] = added_objects.slice(start, Math.min(start + objects_per_worker, l));
        i++;
      }
      $.each(works, function(idx) {
        var work;

        work = this;
        return workers[idx].onmessage = function(e) {
          return handleSimulationResults(e, work.slice());
        };
      });
      return workers_initialized = true;
    };
    window.handleSimulationResults = function(e, particles) {
      var data, display_date_last_updated, georgian_date, i, now, positions;

      data = e.data;
      switch (data.type) {
        case 'result':
          positions = data.value.positions;
          for (i in positions) {
            particles[i].MoveParticleToPosition(positions[i]);
          }
          if (typeof datgui !== 'undefined') {
            now = new Date().getTime();
            if (now - display_date_last_updated > 500) {
              georgian_date = fromJED(data.value.jed);
              datgui['display date'] = georgian_date.getMonth() + 1 + "/" + georgian_date.getDate() + "/" + georgian_date.getFullYear();
              display_date_last_updated = now;
            }
          }
          break;
        case 'debug':
          console.log(data.value);
          break;
        default:
          return console.log('Invalid data type', data.type);
      }
    };
    window.runAsteroidQuery = function(sort) {
      var i, particleSystem, query;

      sort = sort || 'score';
      $('#loading').show();
      for (i in added_objects) {
        scene.remove(added_objects[i].getParticle());
      }
      clearLock(true);
      if (particleSystem) {
        scene.remove(particleSystem);
        particleSystem = null;
      }
      if (asteroids_loaded) {
        stopSimulation();
      }
      if (lastHovered) {
        scene.remove(lastHovered);
      }
      $('#loading-text').html('asteroids database');
      query = '/top?sort=' + sort + '&n=' + (typeof using_webgl !== "undefined" && using_webgl !== null ? using_webgl : {
        MAX_NUM_ORBITS: CANVAS_NUM_ORBITS
      }) + '&use3d=true&compact=true';
      return $.getJSON(query, function(data) {
        var added_objects, asteroids_loaded, featured_count, featured_html, j, locked, n, orbit, particle_system_geometry, particle_to_add, roid, roid_data, useBigParticles, _ref;

        if (!data.results) {
          alert('Sorry, something went wrong and the server failed to return data.');
          return;
        }
        n = data.results.rankings.length;
        added_objects = planets.slice();
        particle_system_geometry = new THREE.Geometry();
        useBigParticles = !using_webgl;
        featured_count = 0;
        featured_html = '';
        while (i < n) {
          if (i === NUM_BIG_PARTICLES) {
            if (!using_webgl) {
              break;
            }
            useBigParticles = false;
          }
          roid_data = data.results.rankings[i];
          roid = {};
          for (j in data.results.fields) {
            roid[data.results.fields[j]] = roid_data[j];
          }
          locked = false;
          orbit = new Orbit3D(roid, {
            color: 0xcccccc,
            display_color: displayColorForObject(roid),
            width: 2,
            object_size: 1.5,
            jed: jed,
            particle_geometry: particle_system_geometry
          });
          if (useBigParticles) {
            (function(roid, orbit, i) {
              return orbit.getParticle().on('mouseover', function(e) {
                var lastHovered;

                if (lastHovered) {
                  scene.remove(lastHovered);
                }
                lastHovered = orbit.getEllipse();
                scene.add(lastHovered);
                if (roid.price < 1e10) {
                  $('#main-caption').html(roid.full_name + ' - no significant value');
                } else {
                  $('#main-caption').html(roid.full_name, +' - $' + roid.fuzzed_price + ' in potential value');
                }
                return $('#other-caption').html('(ranked #' + (i + 1) + ')');
              });
            })(roid, orbit, i);
            particle_to_add = orbit.getParticle();
            scene.add(particle_to_add);
          }
          if (featured_count++ < NUM_BIG_PARTICLES) {
            feature_map[roid.full_name] = {
              'orbit': orbit,
              'idx': added_objects.length
            };
            featured_html += '<tr data-full-name="' + roid.full_name + '"><td><a href="#">' + (roid.prov_des || roid.full_name) + '</a></td><td>' + ((_ref = roid.price < 1) != null ? _ref : {
              'N/A': '$' + roid.fuzzed_price
            }) + '</td></tr>';
          }
          added_objects.push(orbit);
          i++;
        }
        if (featured_2012_da14) {
          $('#objects-of-interest tr:gt(2)').remove();
        } else {
          $('#objects-of-interest tr:gt(1)').remove();
        }
        $('#objects-of-interest').append(featured_html).on('click', 'tr', function() {
          var $e, full_name;

          $('#objects-of-interest tr').css('background-color', '#000');
          $e = $(this);
          full_name = $e.data('full-name');
          $('#sun-selector').css('background-color', 'green');
          switch (full_name) {
            case 'sun':
              clearLock(true);
              return false;
            case '2012 DA14':
              break;
          }
          clearLock();
          $e.css('background-color', 'green');
          $('#sun-selector').css('background-color', '#000');
          setLock(full_name);
          return false;
        });
        $('#objects-of-interest-container').show();
        if (using_webgl) {
          createParticleSystem();
        } else {
          initSimulation();
          startSimulation();
        }
        if (!asteroids_loaded) {
          asteroids_loaded = true;
          if (featured_2012_da14) {
            setLock('earth');
            $('#sun-selector').css('background-color', 'black');
            $('#earth-selector').css('background-color', 'green');
          }
          animate();
        }
        return $('#loading').hide();
      });
    };
    window.createParticleSystem = function() {
      var attributes, i, particleSystem, particle_system_shader_material, uniforms, vertexshader, _ref;

      attributes = {
        a: {
          type: 'f',
          value: []
        },
        e: {
          type: 'f',
          value: []
        },
        i: {
          type: 'f',
          value: []
        },
        o: {
          type: 'f',
          value: []
        },
        ma: {
          type: 'f',
          value: []
        },
        n: {
          type: 'f',
          value: []
        },
        w: {
          type: 'f',
          value: []
        },
        P: {
          type: 'f',
          value: []
        },
        epoch: {
          type: 'f',
          value: []
        },
        value_color: {
          type: 'c',
          value: []
        },
        size: {
          type: 'f',
          value: []
        },
        locked: {
          type: 'f',
          value: []
        }
      };
      uniforms = {
        color: {
          type: "c",
          value: new THREE.Color(0xffffff)
        },
        jed: {
          type: 'f',
          value: jed
        },
        earth_i: {
          type: "f",
          value: Ephemeris.earth.i
        },
        earth_om: {
          type: "f",
          value: Ephemeris.earth.om
        },
        small_roid_texture: {
          type: "t",
          value: THREE.ImageUtils.loadTexture("/img/cloud4.png")
        },
        small_roid_circled_texture: {
          type: "t",
          value: THREE.ImageUtils.loadTexture("/img/cloud4-circled.png")
        }
      };
      vertexshader = document.getElementById('vertexshader').textContent.replace('{{PIXELS_PER_AU}}', PIXELS_PER_AU.toFixed(1));
      particle_system_shader_material = new THREE.ShaderMaterial({
        uniforms: uniforms,
        attributes: attributes,
        vertexShader: vertexshader,
        fragmentShader: document.getElementById('fragmentshader').textContent
      });
      particle_system_shader_material.depthTest = false;
      particle_system_shader_material.vertexColor = true;
      particle_system_shader_material.transparent = true;
      particle_system_shader_material.blending = THREE.AdditiveBlending;
      for (i in particle_system_geometry.vertices) {
        attributes.size.value[i] = (_ref = i < 30) != null ? _ref : {
          50: 15
        };
        attributes.a.value[i] = added_objects[i].eph.a;
        attributes.e.value[i] = added_objects[i].eph.e;
        attributes.i.value[i] = added_objects[i].eph.i;
        attributes.o.value[i] = added_objects[i].eph.om;
        attributes.ma.value[i] = added_objects[i].eph.ma;
        attributes.n.value[i] = added_objects[i].eph.n || -1.0;
        attributes.w.value[i] = added_objects[i].eph.w_bar || (added_objects[i].eph.w + added_objects[i].eph.om);
        attributes.P.value[i] = added_objects[i].eph.P || -1.0;
        attributes.epoch.value[i] = added_objects[i].eph.epoch;
        attributes.value_color.value[i] = added_objects[i].opts.display_color;
        attributes.locked.value[i] = 0.0;
      }
      particleSystem = new THREE.ParticleSystem(particle_system_geometry, particle_system_shader_material);
      window.ps = particleSystem;
      particleSystem.sortParticles = true;
      return scene.add(particleSystem);
    };
    window.starTexture = function(color, size) {
      var canvas, col, context, gradient, rgbaString;

      if (size) {
        size = parseInt(size * 24);
      } else {
        size = 24;
      }
      canvas = document.createElement('canvas');
      canvas.width = size;
      canvas.height = size;
      col = new THREE.Color(color);
      context = canvas.getContext('2d');
      gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width / 2);
      rgbaString = 'rgba(' + ~~(col.r * 255) + ',' + ~~(col.g * 255) + ',' + ~~(col.b * 255) + ',' + 1. + ')';
      gradient.addColorStop(0, rgbaString);
      gradient.addColorStop(0.1, rgbaString);
      gradient.addColorStop(0.6, 'rgba(125, 20, 0, 0.2)');
      gradient.addColorStop(.92, 'rgba(0,0,0,0)');
      context.fillStyle = gradient;
      context.fillRect(0, 0, canvas.width, canvas.height);
      return canvas;
    };
    window.changeJED = function(new_jed) {
      var jed;

      return jed = new_jed;
    };
    window.setDefaultCameraPosition = function() {
      return cam.position.set(0, -155, 32);
    };
    window.animate = function() {
      var pos;

      if (!asteroids_loaded) {
        render();
        requestAnimFrame(animate);
        return;
      }
      if (camera_fly_around) {
        if (locked_object) {
          pos = locked_object.getPosAtTime(jed);
          if (featured_2012_da14 && locked_object.name === 'Earth') {
            cam.position.set(pos[0] - 20, pos[1] + 20, pos[2] + 20);
          } else {
            cam.position.set(pos[0] + 50, pos[1] + 50, pos[2] + 50);
          }
          cameraControls.target = new THREE.Vector3(pos[0], pos[1], pos[2]);
        } else {
          setNeutralCameraPosition();
        }
      }
      render();
      return requestAnimFrame(animate);
    };
    window.render = function(force) {
      var display_date_last_updated, georgian_date, now;

      cameraControls.update();
      now = new Date().getTime();
      if (now - display_date_last_updated > 500 && typeof datgui !== 'undefined') {
        georgian_date = fromJED(jed);
        datgui['display date'] = georgian_date.getMonth() + 1 + "/" + georgian_date.getDate() + "/" + georgian_date.getFullYear();
        display_date_last_updated = now;
      }
      if (using_webgl && (object_movement_on || force)) {
        uniforms.jed.value = jed;
        jed += .25;
      }
      return renderer.render(scene, camera);
    };
    window.requestAnimFrame = frame();
    init();
    initGUI();
    $('#btn-toggle-movement').on('click', function() {
      var object_movement_on;

      return object_movement_on = !object_movement_on;
    });
    $('#controls .js-sort').on('click', function() {
      runAsteroidQuery($(this).data('sort'));
      $('#controls .js-sort').css('font-weight', 'normal');
      return $(this).css('font-weight', 'bold');
    });
    if (featured_2012_da14) {
      jed = toJED(new Date('2012-11-01'));
      return mixpanel.track('2012_da14 special');
    }
  });

}).call(this);
