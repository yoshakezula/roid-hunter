!!!
html
	head
		title Asterank - 3D Asteroid Orbit Space Simulation
		meta(charset="utf-8")
		meta(name="viewport",content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0")
		link(rel="stylesheet",href="css/style.css")
body
	noscript
		| Sorry, this page requires Canvas/WebGL, so you'll need to enable JavaScript.

	#leap-toggle.leap-disabled Leap

	#app-wrapper
		#header NASA plans to lasso a 25ft asteroid in 2025. We're visualizing which asteroids are the easiest to reach.
		#sidebar
			.btn-group(data-toggle="buttons-radio")
				button.btn.asteroid-sort-option(type="button",data-sort="minDur") Shortest Roundtrip
				button.btn.btn-inverse.asteroid-sort-option(type="button",data-sort="mindV") Least Energy

		#asteroid-detail-wrapper
			#asteroid-detail-title Name
			#asteroid-detail-header Trip
			.asteroid-detail-row
				.asteroid-detail-col
					b Days&nbsp;out
					br 
					span 30
				.asteroid-detail-col
					b Stay
					br 
					span 30
				.asteroid-detail-col
					b Days&nbsp;back
					br 
					span 30
				.clear
			#asteroid-detail-header Asteroid Details
			.asteroid-detail-row
				.asteroid-detail-col
					b Diameter
					br 
					span 30
				.asteroid-detail-col
					b Brightness&nbsp;(H)
					br 
					span 30
				.clear
		#asteroid-list-wrapper
			table#asteroid-list.table.table-hover
				thead
					tr
						th Name
						th Energy for Trip
							br
							span.th-units dV (km/s)
						th Mission Length
							br
							span.th-units Days
						th Launch Date
				tbody
					tr.selected-row
						td 2005 CD69
						td 5.951
						td 114
						td Jul 22, 2029

	div#container

	script(type="x-shader/x-fragment",id="vertexshader")
		| #define pi 3.141592653589793238462643383279

		| varying vec2 vUv;

		| attribute vec3 value_color;
		| varying vec3 vColor;

		| attribute float size;

		| uniform float earth_i;
		| uniform float earth_om;

		| uniform float jed;

		| attribute float a;
		| attribute float e;
		| attribute float i;
		| attribute float o;
		| attribute float P;
		| attribute float ma;
		| attribute float n;
		| attribute float w;
		| attribute float epoch;

		| attribute float locked;
		| varying float vLocked;

		| vec3 getAstroPos() {
		| 	float i_rad = (i) * pi/180.0;
		| 	float o_rad = (o) * pi/180.0; // longitude of ascending node
		| 	float p_rad = (w) * pi/180.0; // LONGITUDE of perihelion
		| 	float ma_rad = ma * pi/180.0;
		| 	float n_rad;
		| 	if (P > 0.) {
		| 		n_rad = 2.0 * pi / P;
		| 	}
		| 	else {
		| 		n_rad = n * pi/180.0; // mean motion
		| 	}

		| 	float d = jed - epoch;
		| 	float M = ma_rad + n_rad * d;

		| 	// Estimate eccentric and true anom using iterative approx
		| 	float E0 = M;
		| 	// converted do/while:
		| 	float E1 = M + e * sin(E0);
		| 	float lastdiff = abs(E1-E0);
		| 	E0 = E1;
		| 	for (int foo=0; foo < 25; foo++) {
		| 		E1 = M + e * sin(E0);
		| 		lastdiff = abs(E1-E0);
		| 		E0 = E1;
		| 		if (lastdiff > 0.0000001) {
		| 			break;
		| 		}
		| 	}
		| 	float E = E0;

		| 	float v = 2.0 * atan(sqrt((1.0+e)/(1.0-e)) * tan(E/2.0));

		| 	// radius vector, in AU
		| 	float r = a * (1.0 - e*e) / (1.0 + e * cos(v)) * {{PIXELS_PER_AU}};

		| 	// heliocentric coords
		| 	float X = r * (cos(o_rad) * cos(v + p_rad - o_rad) - sin(o_rad) * sin(v + p_rad - o_rad) * cos(i_rad));
		| 	float Y = r * (sin(o_rad) * cos(v + p_rad - o_rad) + cos(o_rad) * sin(v + p_rad - o_rad) * cos(i_rad));
		| 	float Z = r * (sin(v + p_rad - o_rad) * sin(i_rad));
		| 	return vec3(X, Y, Z);
		| }

		| void main() {
		| 	vColor = value_color;
		| 	vLocked = locked;

		| 	vec3 newpos = getAstroPos();
		| 	vec4 mvPosition = modelViewMatrix * vec4(newpos, 1.0);
		| 	gl_Position = projectionMatrix * mvPosition;
		| 	gl_PointSize = size;
		| }
	script(type="x-shader/x-fragment",id="fragmentshader")
		| varying vec2 vUv;
		| varying vec3 vColor;
		| varying float vLocked;
		| uniform vec3 color;
		| uniform sampler2D small_roid_texture;
		| uniform sampler2D small_roid_circled_texture;

		| void main() {
		| 	if (vLocked == 0.0) {
		| 		gl_FragColor = vec4(vColor, 1.0) * texture2D(small_roid_texture, vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y));
		| 	}
		| 	else {
		| 		gl_FragColor = vec4(vColor, 1.0) * texture2D(small_roid_circled_texture, vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y));
		| 	}
		| }
	script(data-main="js/main",src="js/vendor/require.js")